openapi: 3.0.0
info:
  title: Rideshare
  description: "A Rideshare API"
  version: 1.0.0
servers:
  - url: http://localhost:3333/
    description: Development server
paths:
  /:
    get:
      summary: "Return the active API version"
      tags:
        - "General"
      responses:
        "200":
          description: "The User Details including auth token."
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  version:
                    type: "string"
                    example: "1.0.0"
  /check-username:
    post:
      tags:
        - "General"
      summary: "Check if a username is available"
      responses:
        "200":
          description: "Username Available"
        "409":
          description: "Username taken"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: "Processing Error"
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Error"

  /sync-database:
    post:
      tags:
        - "General"
      summary: "Syncronise Local Database with Firebase Auth content."
      responses:
        "200":
          description: "Syncronised"
        "401":
          description: "Authorisation failure"
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Error"
  /update-user-role:
    put:
      tags:
        - "General"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:           
                userUid:
                  type: "string"
                role:
                  type: "string"
                  example: "admin"
      security:
        - BearerAuth: []
      summary: "Update a user role"
      responses:
        "200":
          description: "Updated User Role"
        "401":
          description: "Authorisation failure"
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Error"
        "404":
          description: "User not found"
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Error"
        "409":
          description: "Role is already updated"
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Error"
        "500":
          description: "Processing Error"
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Error"

  /locations:
    get:
      summary: "Get all locations"
      tags:
        - "Locations"
      security:
      - BearerAuth: []
      responses:
        "200":
          description: "Successfully logged in"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  data:
                    type: "array"
                    items:
                      $ref: '#/components/schemas/Location'
        "401":
          description: "Authorisation failure"
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Error"
        "500":
          description: "Processing Error"
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Error"
                
    post:
      summary: "Create a location"
      tags:
        - "Locations"
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:           
                name:
                  type: "string"
                  example: "Asda, Folkstone"
                address:
                  type: "string"
                  example: "Bouverie Pl, Folkestone CT20 1AU"
                public:
                  type: "boolean"
                latitude:
                  type: "number"
                  example: 4
                longitude:
                  type: "number"
                  example: 4
      responses:
        "201":
          description: "Created Location"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Location"
        "400":
          description: "Validation error"
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Error"
        "401":
          description: "Authorisation failure"
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Error"
        "500":
          description: "Processing Error"
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Error"
  /locations/{id}:
    get:
      summary: "Get a location"
      tags:
        - "Locations"
      security:
      - BearerAuth: []
      responses:
        "200":
          description: "Retrieved Location"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Location"
        "401":
          description: "Authorisation failure"
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Error"
        "404":
          description: "Location not found"
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Error"
        "500":
          description: "Processing Error"
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Error"
    put:
      summary: "Update a location"
      tags:
        - "Locations"
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:           
                name:
                  type: "string"
                  example: "Asda, Folkstone"
                address:
                  type: "string"
                  example: "Bouverie Pl, Folkestone CT20 1AU"
                public:
                  type: "boolean"
                latitude:
                  type: "number"
                  example: 4
                longitude:
                  type: "number"
                  example: 4
      responses:
        "200":
          description: "Updated Location"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Location"
        "400":
          description: "Validation error"
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Error"
        "401":
          description: "Authorisation failure"
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Error"
        "404":
          description: "Location not found"
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Error"
        "500":
          description: "Processing Error"
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Error"
    delete:
      summary: "Delete a location"
      tags:
        - "Locations"
      security:
      - BearerAuth: []
      responses:
        "204":
          description: "Deleted Location"
        "401":
          description: "Authorisation failure"
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Error"
        "404":
          description: "Location not found"
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Error"
        "500":
          description: "Processing Error"
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Error"

  /trips/{tripId}/markers:
    get:
      tags:
        - markers
      summary: Get all markers for a trip
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of markers
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Marker'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: Markers not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: markers/not-found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: markers/processing-error
    post:
      tags:
        - markers
      summary: Create a new marker
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - trip_id
                - latitude
                - longitude
                - address
                - user_uid
              properties:
                trip_id:
                  type: string
                latitude:
                  type: string
                longitude:
                  type: string
                address:
                  type: string
                user_uid:
                  type: string
      responses:
        '201':
          description: Marker created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Marker'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: markers/validation-error
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: markers/processing-error

  /markers/{id}:
    get:
      tags:
        - markers
      summary: Get a specific marker
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Marker details
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Marker'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: Marker not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: markers/not-found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: markers/processing-error

    put:
      tags:
        - markers
      summary: Update a marker
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                trip_id:
                  type: string
                latitude:
                  type: string
                longitude:
                  type: string
                address:
                  type: string
                user_uid:
                  type: string
      responses:
        '200':
          description: Marker updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Marker'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: markers/validation-error
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: Marker not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: markers/not-found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: markers/processing-error

    delete:
      tags:
        - markers
      summary: Delete a marker
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Marker deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: Marker not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: markers/not-found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: markers/processing-error

  /vehicles:
    get:
      tags:
        - vehicles
      summary: Get all vehicles for the authenticated user
      responses:
        '200':
          description: List of vehicles
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Vehicle'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: Vehicles not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: vehicles/not-found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: vehicles/processing-error
    post:
      tags:
        - vehicles
      summary: Create a new vehicle
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - registration
                - make
                - color
              properties:
                registration:
                  type: string
                make:
                  type: string
                color:
                  type: string
      responses:
        '201':
          description: Vehicle created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Vehicle'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: vehicles/validation-error
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: vehicles/processing-error

  /vehicles/{id}:
    get:
      tags:
        - vehicles
      summary: Get a specific vehicle
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Vehicle details
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Vehicle'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden - Not vehicle owner
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: vehicles/forbidden
        '404':
          description: Vehicle not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: vehicles/not-found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: vehicles/processing-error

    put:
      tags:
        - vehicles
      summary: Update a vehicle
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                registration:
                  type: string
                make:
                  type: string
                color:
                  type: string
      responses:
        '200':
          description: Vehicle updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Vehicle'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: vehicles/validation-error
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden - Not vehicle owner
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: vehicles/forbidden
        '404':
          description: Vehicle not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: vehicles/not-found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: vehicles/processing-error

    delete:
      tags:
        - vehicles
      summary: Delete a vehicle
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Vehicle deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden - Not vehicle owner
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: vehicles/forbidden
        '404':
          description: Vehicle not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: vehicles/not-found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: vehicles/processing-error

  /trips:
      get:
        tags:
          - trips
        summary: Get all trips
        responses:
          '200':
            description: List of trips
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/Trip'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Unauthorized'
          '500':
            description: Internal server error
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: trips/processing-error

      post:
        tags:
          - trips
        summary: Create a new trip
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trip'
        responses:
          '201':
            description: Trip created
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/CreateTrip'
          '400':
            description: Validation error
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: trips/validation-error
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Unauthorized'
          '500':
            description: Internal server error
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: trips/processing-error

      put:
        tags:
          - trips
        summary: Update a trip
        parameters:
          - name: id
            in: path
            required: true
            schema:
              type: string
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trip'
        responses:
          '200':
            description: Trip updated
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/Trip'
          '400':
            description: Validation error
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: trips/validation-error
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Unauthorized'
          '403':
            description: Forbidden - Not trip owner
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: trips/forbidden
          '404':
            description: Trip not found
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: trips/not-found
          '500':
            description: Internal server error
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: trips/processing-error


  /trips/{id}:
    get:
      tags:
        - trips
      summary: Get a specific trip
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Trip details
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Trip'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: Trip not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: trips/not-found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: trips/processing-error

    delete:
      tags:
        - trips
      summary: Delete a trip
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Trip deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden - Not trip owner
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: trips/forbidden
        '404':
          description: Trip not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: trips/not-found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: trips/processing-error

components:
  schemas:
    Error:
      type: "object"
      properties:
        error:
          type: "string"
          nullable: false
    Unauthorized:
      type: "object"
      properties:
        error:
          type: "string"
          example: "unauthorized"
    User:
      type: "object"
      properties:
        id:
          type: "number"
          example: 1
        username:
          type: "string"
          example: "johndoe"
        admin:
          type: "boolean"
          example: false
          default: false
          nullable: true
          description: "The set creation limit should only apply to non-admin users"

    Location:
      type: "object"
      properties:
        id:
          type: "number"
          example: 1
        creator_uid:
          type: "string"
          example: "cgvhbjnklm"
        public:
          type: "boolean"
          example: true
        name:
          type: "string"
          example: "Location 1"
        address:
          type: "string"
          example: "123 Main St"
        latitude:
          type: "number"
          example: 37.7749
        longitude:
          type: "number"
          example: -122.4194

    Marker:
      type: object
      properties:
        id:
          type: string
        trip_id:
          type: string
        latitude:
          type: string
        longitude:
          type: string
        address:
          type: string
        user_uid:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Vehicle:
      type: object
      properties:
        id:
          type: string
        owner_uid:
          type: string
        registration:
          type: string
        make:
          type: string
        color:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Trip:
      type: object
      properties:
        id:
          type: string
        driver_uid:
          type: string
        vehicle_id:
          type: string
        registration:
          type: string
        make:
          type: string
        color:
          type: string
        date_of_trip:
          type: string
          format: date-time
        time_of_trip:
          type: string
          format: date-time
        destination_lat:
          type: string
        destination_long:
          type: string
        destination_address:
          type: string
        origin_lat:
          type: string
        origin_long:
          type: string
        origin_address:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    
    CreateTrip:
      type: object
      properties:
        Registration:
          type: string
        vehicle_id:
          type: number
        Make:
          type: string
        Color:
          type: string
        seats_available:
          type: number        
        date_of_trip:
          type: string
          format: date-time
        destination_lat:
          type: string
        destination_long:
          type: string
        destination_address:
          type: string
        origin_lat:
          type: string
        origin_long:
          type: string
        origin_address:
          type: string
        